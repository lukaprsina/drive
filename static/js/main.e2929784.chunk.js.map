{"version":3,"sources":["Artboard.js","App.js","index.js"],"names":["lenDeg","d","angle","deg","Math","PI","x","cos","y","sin","sumVector","a","b","Artboard","roads","debug","elements","forward","backward","strings","asphalt","roadInfo","numberOfForward","numberOfBackward","artboardRef","useRef","useState","coordInfo","setCoordInfo","changeCoordInfo","newCoord","element","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","map","road","windowBox","min","roadLength","roadWidth","getCoordinateInfo","useEffect","window","addEventListener","removeEventListener","points","buildLanes","buildRoad","maxDistance","i","firstPoint","lastPoint","push","first","last","calculatePoints","id","ref","side","layer","lane","lanes","vectors","index","className","coords","x1","y1","x2","y2","console","error","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2929784.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x, y };\n}\n\nfunction sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x, y };\n}\n\nfunction multiplyVector(a, b) {\n  const x = a.x * b;\n  const y = a.y * b;\n  return { x, y };\n}\n\nexport default function Artboard() {\n  let roads = {\n    debug: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n    asphalt: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n  };\n\n  const roadInfo = [\n    {\n      numberOfForward: 3,\n      numberOfBackward: 2,\n      angle: 0,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 4,\n      angle: 110,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 8,\n      numberOfBackward: 2,\n      angle: 180,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 1,\n      angle: 270,\n      forward: [],\n      backward: [],\n    },\n  ];\n\n  /* svg ref */\n  const artboardRef = useRef();\n\n  /* rerender on every window change */\n  const [coordInfo, setCoordInfo] = useState({});\n\n  function changeCoordInfo() {\n    /* get coordinates of the svg element */\n    const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n    /* sets state */\n    setCoordInfo(newCoord);\n  }\n  /* call getCoordinateInfo on the first render */\n  useEffect(() => {\n    changeCoordInfo();\n  }, []);\n\n  useEffect(() => {\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  });\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  /* create elements based on road points */\n  buildRoad(points, roads, coordInfo);\n\n  return (\n    <svg id=\"artboard\" ref={artboardRef}>\n      {roads.asphalt.elements.forward}\n      {roads.asphalt.elements.backward}\n      {roads.debug.elements.forward}\n      {roads.debug.elements.backward}\n    </svg>\n  );\n}\n\nfunction getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y)\n  const roadLength = windowBox / 2;\n  const roadWidth = windowBox / (maxRoadWidth * 3);\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  /* coordinfo { x, y, roadLength, roadWidth, maxRoadWidth }; */\n  if (!coordInfo.roadLength && !coordInfo.roadWidth) {\n    return null;\n  }\n\n  for (const road of roadInfo) {\n    /* maxDistance = pixli od sredine do skrajnega cestišča */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n\n    for (let i = 0; i < road.numberOfForward + road.numberOfBackward; i++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - i * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center */\n        lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth, road.angle)\n      );\n\n      let lastPoint = lenDeg(coordInfo.roadLength, road.angle);\n\n      if (i >= road.numberOfBackward) {\n        road.forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        road.backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return roadInfo;\n}\n\nfunction buildLanes(road, roads, side, layer, coordInfo) {\n  switch (layer) {\n    case \"asphalt\":\n      for (const lane of road[side]) {\n        let lanes = \"\";\n        const vectors = [\n          lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n          lenDeg(coordInfo.roadWidth, road.angle + 90),\n          multiplyVector(lane.last, -1),\n        ];\n\n        lanes += \"M \" + coordInfo.x + \" \" + coordInfo.y + \" \";\n        lanes += \"m \" + lane.first.x + \" \" + lane.first.y + \" \";\n        lanes += \"l \" + vectors[0].x + \" \" + vectors[0].y + \" \";\n        lanes += \"l \" + lane.last.x + \" \" + lane.last.y + \" \";\n        lanes += \"l \" + vectors[1].x + \" \" + vectors[1].y + \" \";\n        lanes += \"l \" + vectors[2].x + \" \" + vectors[2].y + \" \";\n        lanes += \"Z\";\n\n        roads[layer].strings[side].push(lanes);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((lane, index) => (\n        <path d={lane} key={index} className={side + \"-\" + layer} />\n      ));\n      break;\n\n    case \"debug\":\n      for (const lane of road[side]) {\n        let coords = {\n          x1: coordInfo.x + lane.first.x,\n          y1: coordInfo.y + lane.first.y,\n          x2: coordInfo.x + lane.first.x + lane.last.x,\n          y2: coordInfo.y + lane.first.y + lane.last.y,\n        };\n        roads[layer].strings[side].push(coords);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((coords, index) => (\n        <line\n          x1={coords.x1}\n          y1={coords.y1}\n          x2={coords.x2}\n          y2={coords.y2}\n          key={index}\n          className={side + \"-\" + layer}\n        />\n      ));\n      break;\n\n    case \"center\":\n      break;\n\n    default:\n      console.error(\"Wrong road layer\");\n  }\n}\n\nfunction buildRoad(points, roads, coordInfo) {\n  if (!points) {\n    return null;\n  }\n\n  for (const road of points) {\n    buildLanes(road, roads, \"forward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"forward\", \"asphalt\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"asphalt\", coordInfo);\n    buildLanes(road, roads, \"center\", \"center\", coordInfo);\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n/* import { Typography } from \"@material-ui/core\";\nimport { useSpring, animated, config } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\"; */\nimport Artboard from \"./Artboard.js\";\n\n\nexport default function App() {\n  return (\n    <>\n      <Artboard />\n      {/* <Solution />\n      <Inventory /> */}\n    </>\n  );\n}\n/* function Solution() {\n  return (\n    <Typography variant=\"body1\">\n      Solution\n      <br />\n    </Typography>\n  );\n}\n\nfunction Inventory() {\n  return (\n    <>\n      <Item />\n      <Item />\n    </>\n  );\n}\n\nfunction Item() {\n  const [{ x, y }, setSpring] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: config.stiff,\n  }));\n\n  const [isClicking, setIsClicking] = useState(false);\n\n  const bind = useGesture({\n    onDrag: ({ down, movement: [mx, my] }) => {\n      setSpring({ x: down ? mx : 0, y: down ? my : 0 });\n      setIsClicking(!mx && !my);\n    },\n    onDragEnd: ({ event }) => {\n      if (isClicking) {\n        console.log(\"Click\");\n      } else {\n        console.log(\"Move\", event.x, event.y);\n      }\n    },\n  });\n\n  return <animated.div className=\"drag\" {...bind()} style={{ x, y }} />;\n}\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}