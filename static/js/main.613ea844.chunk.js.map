{"version":3,"sources":["buildRoad.js","Cars.js","Artboard.js","img/forward.svg","img/give way.svg","img/left.svg","img/right.svg","img/stop.svg","img/priority.svg","Inventory.js","App.js","index.js"],"names":["vectors","offsetBottom","lane","coordInfo","sumVector","first","offsetTop","last","halfRoadLeft","road","lenDeg","roadWidth","angle","halfRoadRight","laneBottomLeft","laneTopLeft","laneBottomRight","laneTopRight","roadBottomLeft","forward","roadBottomRight","backward","length","roadTopLeft","roadTopRight","roadTopMiddle","roadLength","numberOfForward","numberOfBackward","pointsToString","pointsArray","pathD","order","letter","coords","x","y","SvgGroup","accept","onDrop","indexRoad","children","side","useDrop","drop","item","dropBind","ref","Asphalt","string","indexLane","d","className","Debug","points","disabled","debug","strings","elements","push","map","index","x1","y1","x2","y2","Line","line","continous","striped","entries","strokeDasharray","RotateControl","rotateBind","rotate","cx","cy","r","LaneControl","addLanes","remove","add","onClick","Center","center","element","Curb","curb","Cars","objectInfo","_","require","Artboard","artboardRef","useRef","useState","setCoordInfo","roadInfo","setRoadInfo","useDrag","event","args","newPoint","a","k","multVector","deg","Math","atan2","PI","newRoadInfo","cloneDeep","sort","b","i","useEffect","changeCoordInfo","newCoord","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","windowBox","min","getCoordinateInfo","window","addEventListener","removeEventListener","maxDistance","allLanes","test","j","firstPoint","lastPoint","calculatePoints","setObjectInfo","asphaltElements","handleSignDrop","handleCarDrop","makeAsphalt","newObjectInfo","signs","id","asphaltBackward","asphaltForward","console","log","style","touchAction","cos","sin","Inventory","Signs","give_way","stop","priority","image","Sign","src","Car","type","drag","draggable","IconButton","alt","App","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.613ea844.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { sumVector, lenDeg } from \"./Artboard\";\n\n/* const vectors = {\n  offsetBottom: (lane, coordInfo) => sumVector(coordInfo, lane.first),\n\n  offsetTop: (lane, coordInfo) => sumVector(coordInfo, lane.last),\n\n  halfRoadLeft: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n\n  halfRoadRight: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n\n  laneBottomLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  laneBottomRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  roadBottomLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[0].first, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadBottomRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[road.forward.length - 1].first, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n  roadTopLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[0].last, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadTopRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[road.forward.length - 1].last, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n\n  roadTopMiddle: (road, coordInfo) =>\n    sumVector(\n      lenDeg(coordInfo.roadLength, road.angle),\n      sumVector(\n        lenDeg(\n          ((road.numberOfForward + road.numberOfBackward) *\n            coordInfo.roadWidth) /\n            2,\n          road.angle + 90\n        ),\n        vectors.roadBottomLeft(road, coordInfo)\n      )\n    ),\n}; */\n\nconst vectors = {\n  offsetBottom: (lane, coordInfo) => sumVector(coordInfo, lane.first),\n\n  offsetTop: (lane, coordInfo) => sumVector(coordInfo, lane.last),\n\n  halfRoadLeft: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n\n  halfRoadRight: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n\n  laneBottomLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  laneBottomRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  roadBottomLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[0].first, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadBottomRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[road.backward.length - 1].first, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n  roadTopLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[0].last, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadTopRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[road.backward.length - 1].last, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n\n  roadTopMiddle: (road, coordInfo) =>\n    sumVector(\n      lenDeg(coordInfo.roadLength, road.angle),\n      sumVector(\n        lenDeg(\n          ((road.numberOfForward + road.numberOfBackward) *\n            coordInfo.roadWidth) /\n            2,\n          road.angle + 90\n        ),\n        vectors.roadBottomLeft(road, coordInfo)\n      )\n    ),\n};\n\nexport function pointsToString(pointsArray) {\n  if (!(pointsArray && pointsArray.length)) {\n    return null;\n  }\n\n  let pathD = \"\";\n\n  for (const order of pointsArray) {\n    pathD += order.letter + \" \";\n\n    if (order.coords) {\n      for (const coords of order.coords) {\n        pathD += coords.x + \" \" + coords.y + \" \";\n      }\n    }\n  }\n  return pathD;\n}\n\nexport function makeAsphalt({\n  points,\n  coordInfo,\n  handleSignDrop,\n  handleCarDrop,\n  disabled = false,\n}) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const elements = { forward: [], backward: [] };\n\n  for (const [indexRoad, road] of points.entries()) {\n    let strings = { forward: [], backward: [] };\n\n    for (const side of [\"backward\", \"forward\"]) {\n      for (const lane of road[side]) {\n        strings[side].push(\n          pointsToString([\n            { letter: \"M\", coords: [vectors.offsetBottom(lane, coordInfo)] },\n            {\n              letter: \"L\",\n              coords: [\n                vectors.laneBottomLeft(lane, road, coordInfo),\n                vectors.laneTopLeft(lane, road, coordInfo),\n                vectors.laneTopRight(lane, road, coordInfo),\n                vectors.laneBottomRight(lane, road, coordInfo),\n              ],\n            },\n            { letter: \"Z\" },\n          ])\n        );\n      }\n    }\n\n    for (const side of [\"backward\", \"forward\"]) {\n      elements[side].push(\n        <SvgGroup\n          key={indexRoad}\n          indexRoad={indexRoad}\n          accept={[\"sign\"]}\n          side={side}\n          onDrop={(item) => handleSignDrop(item, indexRoad, side)}\n        >\n          {strings[side].map((string, index) => (\n            <Asphalt\n              string={string}\n              side={side}\n              indexLane={index}\n              indexRoad={indexRoad}\n              accept={[\"car\"]}\n              onDrop={(item) => handleCarDrop(item, indexRoad, side, index)}\n              key={index}\n            />\n          ))}\n        </SvgGroup>\n      );\n    }\n  }\n  return elements;\n}\n\nfunction SvgGroup({ accept, onDrop, indexRoad, children, side }) {\n  const [, dropBind] = useDrop({\n    accept,\n    drop: (item) => onDrop(item, indexRoad, side),\n  });\n\n  return <g ref={dropBind}>{children}</g>;\n}\n\nfunction Asphalt({ string, side, indexLane, indexRoad, accept, onDrop }) {\n  const [, dropBind] = useDrop({\n    accept,\n    drop: (item) => onDrop(item, indexRoad, side, indexLane),\n  });\n\n  return (\n    <path\n      ref={dropBind}\n      d={string}\n      key={indexLane}\n      className={side + \"-asphalt\"}\n    />\n  );\n}\n\nexport function Debug({ points, coordInfo, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const debug = {\n    strings: { forward: [], backward: [] },\n    elements: {},\n  };\n\n  for (const side of [\"backward\", \"forward\"]) {\n    for (const road of points) {\n      for (const lane of road[side]) {\n        debug.strings[side].push([\n          vectors.offsetBottom(lane, coordInfo),\n          vectors.offsetTop(lane, coordInfo),\n        ]);\n      }\n    }\n\n    debug.elements[side] = debug.strings[side].map((coords, index) => (\n      <line\n        x1={coords[0].x}\n        y1={coords[0].y}\n        x2={coords[1].x}\n        y2={coords[1].y}\n        key={index}\n        className={side + \"-debug\"}\n      />\n    ));\n  }\n\n  return (\n    <g>\n      {debug.elements.forward}\n      {debug.elements.backward}\n    </g>\n  );\n}\n\nexport function Line({ points, coordInfo, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const line = {\n    elements: {},\n    strings: { continous: [], striped: [] },\n  };\n\n  for (const side of [\"backward\", \"forward\"]) {\n    for (const road of points) {\n      for (const [indexLane, lane] of road[side].entries()) {\n        if (indexLane !== road[side].length - 1 || side === \"forward\") {\n          if (indexLane === road[side].length - 1 && side === \"forward\") {\n            line.strings.continous.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          } else {\n            line.strings.striped.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          }\n        }\n      }\n    }\n  }\n\n  line.elements.continous = line.strings.continous.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n    />\n  ));\n\n  line.elements.striped = line.strings.striped.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n      strokeDasharray=\"30, 60\"\n    />\n  ));\n\n  return (\n    <g>\n      {line.elements.continous}\n      {line.elements.striped}\n    </g>\n  );\n}\n\nexport function RotateControl({\n  points,\n  coordInfo,\n  rotateBind,\n  disabled = false,\n}) {\n  if (!(points && coordInfo && rotateBind && !disabled)) {\n    return null;\n  }\n\n  const rotate = {\n    strings: [],\n  };\n\n  for (const road of points) {\n    rotate.strings.push({\n      vectors: vectors.roadTopMiddle(road, coordInfo),\n      order: road.order,\n    });\n  }\n\n  rotate.elements = rotate.strings.map((coords, index) => (\n    <circle\n      cx={coords.vectors.x}\n      cy={coords.vectors.y}\n      r=\"10\"\n      className=\"rotate\"\n      key={index}\n      {...rotateBind(coords.order)}\n    />\n  ));\n\n  return <g>{rotate.elements}</g>;\n}\n\nexport function LaneControl({ points, coordInfo, addLanes, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const lane = {\n    strings: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n    elements: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n  };\n\n  for (const road of points) {\n    lane.strings.forward.remove.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.forward.add.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.remove.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.add.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n  }\n\n  lane.elements.forward.remove = lane.strings.forward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Forward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.forward.add = lane.strings.forward.add.map((coords, index) => (\n    <circle\n      cx={coords.x}\n      cy={coords.y}\n      r=\"10\"\n      className=\"add-lane\"\n      key={index}\n      onClick={() => addLanes(index, \"Forward\", 1)}\n    />\n  ));\n\n  lane.elements.backward.remove = lane.strings.backward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.backward.add = lane.strings.backward.add.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", 1)}\n      />\n    )\n  );\n\n  return (\n    <g>\n      {lane.elements.forward.remove}\n      {lane.elements.forward.add}\n      {lane.elements.backward.remove}\n      {lane.elements.backward.add}\n    </g>\n  );\n}\n\nexport function Center({ points, coordInfo, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const center = {};\n\n  center.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const road of points) {\n    center.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadBottomRight(road, coordInfo),\n        ],\n      },\n    ]);\n  }\n\n  center.element = <path d={center.string} className=\"center\" />;\n\n  return center.element;\n}\n\nexport function Curb({ points, coordInfo, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const curb = {};\n\n  curb.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const [indexRoad, road] of points.entries()) {\n    curb.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadTopLeft(road, coordInfo),\n        ],\n      },\n      {\n        letter: \"M\",\n        coords: [vectors.roadTopRight(road, coordInfo)],\n      },\n      {\n        letter: \"L\",\n        coords: [vectors.roadBottomRight(road, coordInfo)],\n      },\n    ]);\n    if (indexRoad === points.length - 1) {\n      curb.string += pointsToString([\n        {\n          letter: \"L\",\n          coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n        },\n      ]);\n    }\n  }\n\n  curb.element = <path d={curb.string} className=\"curb\" />;\n\n  return curb.element;\n}\n","import React from 'react'\n\nexport default function Cars(objectInfo, coordInfo) {\n  return <text>Cars</text>\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDrag } from \"react-use-gesture\";\nimport {\n  makeAsphalt,\n  Debug,\n  Line,\n  RotateControl,\n  LaneControl,\n  Center,\n  Curb,\n} from \"./buildRoad\";\nimport Cars from \"./Cars\";\n\nconst _ = require(\"lodash\");\n\nexport default function Artboard() {\n  /* svg ref */\n  const artboardRef = useRef();\n\n  const [coordInfo, setCoordInfo] = useState({});\n\n  const [roadInfo, setRoadInfo] = useState([\n    {\n      numberOfBackward: 1,\n      numberOfForward: 2,\n      angle: 0,\n      order: 0,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 110,\n      order: 1,\n    },\n    {\n      numberOfBackward: 2,\n      numberOfForward: 3,\n      angle: 170,\n      order: 2,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 300,\n      order: 3,\n    },\n  ]);\n\n  const rotateBind = useDrag(({ event, args: [order] }) => {\n    if (event.x && event.y) {\n      const newPoint = sumVector(event, multVector(coordInfo, -1));\n      const newAngle = Math.atan2(newPoint.y, newPoint.x);\n\n      let deg = newAngle * (180 / Math.PI);\n      deg %= 360;\n      if (deg < 0) {\n        deg += 360;\n      }\n\n      const newRoadInfo = _.cloneDeep(roadInfo);\n      newRoadInfo.sort((a, b) => a.angle - b.angle);\n\n      for (let i = 0; i < newRoadInfo.length; i++) {\n        if (order === newRoadInfo[i].order) {\n          newRoadInfo[i].angle = deg;\n        }\n      }\n\n      setRoadInfo(newRoadInfo);\n    }\n  });\n\n  function addLanes(index, side, add) {\n    const newRoadInfo = _.cloneDeep(roadInfo);\n\n    const numberOfLanes = newRoadInfo[index][\"numberOf\" + side];\n\n    if (numberOfLanes > 1 || add > 0) {\n      newRoadInfo[index][\"numberOf\" + side] += add;\n    }\n\n    setRoadInfo(newRoadInfo);\n  }\n\n  useEffect(() => {\n    function changeCoordInfo() {\n      /* get coordinates of the svg element */\n      const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n      /* sets state */\n      setCoordInfo(newCoord);\n    }\n\n    changeCoordInfo();\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  }, [artboardRef, roadInfo]);\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  const [objectInfo, setObjectInfo] = useState([\n    { backward: [], forward: [] },\n    { backward: [], forward: [] },\n    { backward: [], forward: [] },\n    { backward: [], forward: [] },\n  ]);\n\n  function handleCarDrop(item, indexRoad, side, indexLane) {\n    const newObjectInfo = _.cloneDeep(objectInfo);\n\n    if (!newObjectInfo[indexRoad][side][indexLane]) {\n      newObjectInfo[indexRoad][side][indexLane] = [];\n    }\n\n    newObjectInfo[indexRoad][side][indexLane].push(item.id);\n    setObjectInfo(newObjectInfo);\n  }\n\n  function handleSignDrop(item, indexRoad, side) {\n    if (side === \"forward\") {\n      const newObjectInfo = _.cloneDeep(objectInfo);\n\n      if (!newObjectInfo[indexRoad].signs) {\n        newObjectInfo[indexRoad].signs = [];\n      }\n\n      newObjectInfo[indexRoad].signs.push(item.id);\n      setObjectInfo(newObjectInfo);\n    }\n  }\n\n  const asphaltElements = makeAsphalt({\n    points,\n    coordInfo,\n    handleSignDrop,\n    handleCarDrop,\n  });\n\n  if (asphaltElements) {\n    var asphaltBackward = asphaltElements.backward;\n    var asphaltForward = asphaltElements.forward;\n  }\n\n  console.log(objectInfo)\n\n  return (\n    // touch-action ensures that chrome doesnt stop the drag after a few frames,\n    // but it doesn't work on svg elements, so I wraped it in a div,\n    // https://stackoverflow.com/questions/45678190/dynamically-disabling-touch-action-overscroll-for-svg-elements\n\n    <div style={{ touchAction: \"none\" }}>\n      <svg className=\"artboard\" ref={artboardRef}>\n        <g>\n          {asphaltBackward}\n          {asphaltForward}\n        </g>\n        <Center points={points} coordInfo={coordInfo} />\n        <Curb points={points} coordInfo={coordInfo} />\n        <Line points={points} coordInfo={coordInfo} />\n        <Debug points={points} coordInfo={coordInfo} disabled />\n        <RotateControl\n          points={points}\n          coordInfo={coordInfo}\n          rotateBind={rotateBind}\n        />\n        <LaneControl\n          points={points}\n          coordInfo={coordInfo}\n          addLanes={addLanes}\n        />\n        <Cars objectInfo={objectInfo} coordInfo={coordInfo} />\n      </svg>\n    </div>\n  );\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  const points = [];\n\n  if (!(coordInfo && coordInfo.roadLength && coordInfo.roadWidth)) {\n    return null;\n  }\n\n  for (let i = 0; i < roadInfo.length; i++) {\n    const road = roadInfo[i];\n\n    /* maxDistance = pixels from the center to the edge */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n    points[i] = {\n      forward: [],\n      backward: [],\n      maxDistance,\n      angle: road.angle,\n      order: road.order,\n      numberOfForward: road.numberOfForward,\n      numberOfBackward: road.numberOfBackward,\n    };\n\n    const allLanes = road.numberOfForward + road.numberOfBackward;\n    const test =\n      ((road.numberOfForward + road.numberOfBackward) * coordInfo.roadWidth) /\n      5;\n\n    for (let j = 0; j < allLanes; j++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - j * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center area */\n        sumVector(\n          lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth, road.angle),\n          lenDeg(test, road.angle - 180)\n        )\n      );\n\n      let lastPoint = sumVector(\n        firstPoint,\n        lenDeg(coordInfo.roadLength, road.angle)\n      );\n\n      if (j < road.numberOfForward) {\n        points[i].forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        points[i].backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return points;\n}\n\nexport function lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x, y };\n}\n\nexport function sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x, y };\n}\n\nexport function multVector(a, k) {\n  const x = a.x * k;\n  const y = a.y * k;\n  return { x, y };\n}\n\nexport function getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y);\n  const roadLength = windowBox / 2;\n  const roadWidth = (windowBox / maxRoadWidth) * 0.5;\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n","export default __webpack_public_path__ + \"static/media/forward.fc55a6c4.svg\";","export default __webpack_public_path__ + \"static/media/give way.db0b54fd.svg\";","export default __webpack_public_path__ + \"static/media/left.1aa9e07d.svg\";","export default __webpack_public_path__ + \"static/media/right.ff8f1205.svg\";","export default __webpack_public_path__ + \"static/media/stop.4938481c.svg\";","export default __webpack_public_path__ + \"static/media/priority.1971fe2a.svg\";","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDrag } from \"react-dnd\";\n\nimport forward from \"./img/forward.svg\";\nimport give_way from \"./img/give way.svg\";\nimport left from \"./img/left.svg\";\nimport right from \"./img/right.svg\";\nimport stop from \"./img/stop.svg\";\nimport priority from \"./img/priority.svg\";\n\nexport function Inventory() {\n  const images = [forward, give_way, left, right, stop, priority];\n  const Signs = images.map((image, index) => (\n    <Sign src={image} key={index} index={index} />\n  ));\n\n  return <div className=\"inventory\">{Signs}<Car /></div>;\n}\n\nfunction Car() {\n  const [, drag] = useDrag({\n    item: { id: \"car\", type: \"car\" },\n  });\n\n  return (\n    <div className=\"drag\" ref={drag}>\n      <div className=\"item car\" draggable={false} ></div>\n    </div>\n  );\n}\n\nfunction Sign({src, index}) {\n  const [, drag] = useDrag({\n    item: { id: index, type: \"sign\" },\n    /* end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      console.log(item, dropResult, \"from item\")\n    } */\n  });\n\n  return (\n    <IconButton className=\"drag\" ref={drag}>\n      <img src={src} className=\"item sign\" alt={src} draggable={false} />\n    </IconButton>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Artboard from \"./Artboard.js\";\nimport { Inventory } from \"./Inventory\";\n\nexport default function App() {\n  return (\n    <>\n      <Inventory />\n      <Artboard />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}