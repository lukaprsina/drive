{"version":3,"sources":["Artboard.js","App.js","index.js"],"names":["lenDeg","d","angle","deg","Math","PI","x","cos","y","sin","sumVector","a","b","Artboard","props","artboardRef","useRef","roadInfo","useState","coordInfo","setCoordInfo","useEffect","changeCoordInfo","newCoord","element","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","map","road","numberOfForward","numberOfBackward","windowBox","min","roadLength","roadWidth","getCoordinateInfo","window","addEventListener","removeEventListener","roads","points","debug","elements","forward","backward","strings","asphalt","centerPoints","entries","index","buildLanes","firstPoint","first","lastPoint","length","center","className","buildRoad","i","maxDistance","allLanes","j","push","last","calculatePoints","id","ref","Typography","side","layer","lane","lanes","offset","across","back","coords","x1","y1","x2","y2","console","error","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.190b2f53.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x, y };\n}\n\nfunction sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x, y };\n}\n\nexport default function Artboard(props) {\n  /* svg ref */\n  const artboardRef = useRef();\n\n  const roadInfo = props.roadInfo;\n\n  const [coordInfo, setCoordInfo] = useState({});\n\n  useEffect(() => {\n    function changeCoordInfo() {\n      /* get coordinates of the svg element */\n      const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n      /* sets state */\n      setCoordInfo(newCoord);\n    }\n\n    changeCoordInfo();\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  }, [artboardRef, roadInfo]);\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  /* create elements based on road points */\n  const roads = buildRoad(points, coordInfo);\n\n  return (\n    <svg id=\"artboard\" ref={artboardRef}>\n      {roads ? roads.asphalt.elements.forward : null}\n      {roads ? roads.asphalt.elements.backward : null}\n      {/* {roads ? roads.debug.elements.forward : null}\n      {roads ? roads.debug.elements.backward : null} */}\n      {roads ? roads.center : null}\n      {!roads ? <Typography>Loading</Typography> : null}\n    </svg>\n  );\n}\n\nfunction getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y);\n  const roadLength = windowBox / 2;\n  const roadWidth = (windowBox / maxRoadWidth) * 0.5;\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  const points = [];\n  /* coordinfo { x, y, roadLength, roadWidth, maxRoadWidth }; */\n  if (!(coordInfo && coordInfo.roadLength && coordInfo.roadWidth)) {\n    return null;\n  }\n\n  for (let i = 0; i < roadInfo.length; i++) {\n    const road = roadInfo[i];\n\n    points[i] = { forward: [], backward: [], angle: road.angle };\n\n    /* maxDistance = pixels from the center to the edge */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n\n    const allLanes = road.numberOfForward + road.numberOfBackward;\n\n    for (let j = 0; j < allLanes; j++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - j * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center area */\n        lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth * 0.8, road.angle)\n      );\n\n      let lastPoint = sumVector(\n        firstPoint,\n        lenDeg(coordInfo.roadLength, road.angle)\n      );\n\n      if (j >= road.numberOfBackward) {\n        points[i].forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        points[i].backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return points;\n}\n\nfunction buildRoad(points, coordInfo) {\n  const roads = {\n    debug: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n    asphalt: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n  };\n\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  let centerPoints = \"\";\n\n  for (const [index, road] of points.entries()) {\n    buildLanes(road, roads, \"forward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"forward\", \"asphalt\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"asphalt\", coordInfo);\n\n    let firstPoint = sumVector(\n      sumVector(road.backward[0].first, coordInfo),\n      lenDeg(coordInfo.roadWidth / 2, road.angle - 90)\n    );\n    let lastPoint = sumVector(\n      sumVector(road.forward[road.forward.length - 1].first, coordInfo),\n      lenDeg(coordInfo.roadWidth / 2, road.angle + 90)\n    );\n\n    if (index === 0) {\n      centerPoints += \"M \" + firstPoint.x + \" \" + firstPoint.y + \" \";\n    }\n\n    centerPoints += \"L \" + firstPoint.x + \" \" + firstPoint.y + \" \";\n\n    centerPoints += \"L \" + lastPoint.x + \" \" + lastPoint.y + \" \";\n  }\n  /* centerPoints += \"Z\"; */\n\n  roads.center = <path d={centerPoints} className=\"forward-asphalt\" />;\n  return roads;\n}\n\nfunction buildLanes(road, roads, side, layer, coordInfo) {\n  switch (layer) {\n    case \"asphalt\":\n      for (const lane of road[side]) {\n        let lanes = \"\";\n\n        const offset = sumVector(coordInfo, lane.first);\n\n        const firstPoint = sumVector(\n          lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n          offset\n        );\n\n        const lastPoint = sumVector(\n          sumVector(coordInfo, lane.last),\n          lenDeg(coordInfo.roadWidth / 2, road.angle - 90)\n        );\n\n        const across = sumVector(\n          lenDeg(coordInfo.roadWidth, road.angle + 90),\n          lastPoint\n        );\n\n        const back = sumVector(\n          lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n          offset\n        );\n\n        lanes += \"M \" + offset.x + \" \" + offset.y + \" \";\n        lanes += \"L \" + firstPoint.x + \" \" + firstPoint.y + \" \";\n        lanes += \"L \" + lastPoint.x + \" \" + lastPoint.y + \" \";\n        lanes += \"L \" + across.x + \" \" + across.y + \" \";\n        lanes += \"L \" + back.x + \" \" + back.y + \" \";\n        /* lanes += \"Z\"; */\n\n        roads[layer].strings[side].push(lanes);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((lane, index) => (\n        <path d={lane} key={index} className={side + \"-\" + layer} />\n      ));\n      break;\n\n    case \"debug\":\n      for (const lane of road[side]) {\n        const coords = {\n          x1: coordInfo.x + lane.first.x,\n          y1: coordInfo.y + lane.first.y,\n          x2: coordInfo.x + lane.last.x,\n          y2: coordInfo.y + lane.last.y,\n        };\n        roads[layer].strings[side].push(coords);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((coords, index) => (\n        <line\n          x1={coords.x1}\n          y1={coords.y1}\n          x2={coords.x2}\n          y2={coords.y2}\n          key={index}\n          className={side + \"-\" + layer}\n        />\n      ));\n      break;\n\n    default:\n      console.error(\"Wrong road layer\");\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n/* import { Typography } from \"@material-ui/core\";\nimport { useSpring, animated, config } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\"; */\nimport Artboard from \"./Artboard.js\";\n\n\nexport default function App() {\n  const roadInfo = [\n    {\n      numberOfForward: 1,\n      numberOfBackward: 1,\n      angle: 10,\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 1,\n      angle: 110,\n    },\n    {\n      numberOfForward: 2,\n      numberOfBackward: 2,\n      angle: 180,\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 1,\n      angle: 300,\n    },\n  ];\n  return (\n    <>\n      <Artboard roadInfo={roadInfo}/>\n      {/* <Solution />\n      <Inventory /> */}\n    </>\n  );\n}\n/* function Solution() {\n  return (\n    <Typography variant=\"body1\">\n      Solution\n      <br />\n    </Typography>\n  );\n}\n\nfunction Inventory() {\n  return (\n    <>\n      <Item />\n      <Item />\n    </>\n  );\n}\n\nfunction Item() {\n  const [{ x, y }, setSpring] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: config.stiff,\n  }));\n\n  const [isClicking, setIsClicking] = useState(false);\n\n  const bind = useGesture({\n    onDrag: ({ down, movement: [mx, my] }) => {\n      setSpring({ x: down ? mx : 0, y: down ? my : 0 });\n      setIsClicking(!mx && !my);\n    },\n    onDragEnd: ({ event }) => {\n      if (isClicking) {\n        console.log(\"Click\");\n      } else {\n        console.log(\"Move\", event.x, event.y);\n      }\n    },\n  });\n\n  return <animated.div className=\"drag\" {...bind()} style={{ x, y }} />;\n}\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}