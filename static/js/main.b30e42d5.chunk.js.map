{"version":3,"sources":["buildRoad.js","Artboard.js","img/forward.svg","img/give way.svg","img/left.svg","img/right.svg","img/stop.svg","img/priority.svg","Inventory.js","App.js","index.js"],"names":["vectors","offsetBottom","lane","coordInfo","sumVector","first","offsetTop","last","halfRoadLeft","road","lenDeg","roadWidth","angle","halfRoadRight","laneBottomLeft","laneTopLeft","laneBottomRight","laneTopRight","roadBottomLeft","backward","roadBottomRight","forward","length","roadTopLeft","roadTopRight","roadTopMiddle","roadLength","numberOfForward","numberOfBackward","pointsToString","pointsArray","pathD","order","letter","coords","x","y","Asphalt","string","side","index","indexRoad","accept","onDrop","useDrop","drop","item","monitor","dropBind","ref","d","className","Debug","points","disabled","debug","strings","elements","push","map","x1","y1","x2","y2","Line","line","continous","striped","entries","indexLane","strokeDasharray","RotateControl","rotateBind","rotate","cx","cy","r","LaneControl","addLanes","remove","add","onClick","Center","center","element","Curb","curb","Artboard","artboardRef","useRef","useState","setCoordInfo","roadInfo","setRoadInfo","useDrag","event","args","newPoint","a","k","multVector","deg","Math","atan2","PI","newRoadInfo","sort","b","i","useEffect","changeCoordInfo","newCoord","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","windowBox","min","getCoordinateInfo","window","addEventListener","removeEventListener","maxDistance","allLanes","j","firstPoint","lastPoint","calculatePoints","asphaltElements","handleDrop","makeAsphalt","console","log","style","touchAction","cos","sin","Inventory","Items","give_way","stop","priority","image","Item","src","id","type","drag","alt","draggable","App","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.b30e42d5.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { sumVector, lenDeg } from \"./Artboard\";\n\nconst vectors = {\n  offsetBottom: (lane, coordInfo) => sumVector(coordInfo, lane.first),\n\n  offsetTop: (lane, coordInfo) => sumVector(coordInfo, lane.last),\n\n  halfRoadLeft: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n\n  halfRoadRight: (road, coordInfo) =>\n    lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n\n  laneBottomLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopLeft: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadLeft(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  laneBottomRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetBottom(lane, coordInfo)\n    ),\n\n  laneTopRight: (lane, road, coordInfo) =>\n    sumVector(\n      vectors.halfRoadRight(road, coordInfo),\n      vectors.offsetTop(lane, coordInfo)\n    ),\n\n  roadBottomLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[0].first, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadBottomRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[road.forward.length - 1].first, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n  roadTopLeft: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.backward[0].last, coordInfo),\n      vectors.halfRoadLeft(road, coordInfo)\n    ),\n\n  roadTopRight: (road, coordInfo) =>\n    sumVector(\n      sumVector(road.forward[road.forward.length - 1].last, coordInfo),\n      vectors.halfRoadRight(road, coordInfo)\n    ),\n\n  roadTopMiddle: (road, coordInfo) =>\n    sumVector(\n      lenDeg(coordInfo.roadLength, road.angle),\n      sumVector(\n        lenDeg(\n          ((road.numberOfForward + road.numberOfBackward) *\n            coordInfo.roadWidth) /\n            2,\n          road.angle + 90\n        ),\n        vectors.roadBottomLeft(road, coordInfo)\n      )\n    ),\n};\n\nexport function pointsToString(pointsArray) {\n  if (!(pointsArray && pointsArray.length)) {\n    return null;\n  }\n\n  let pathD = \"\";\n\n  for (const order of pointsArray) {\n    pathD += order.letter + \" \";\n\n    if (order.coords) {\n      for (const coords of order.coords) {\n        pathD += coords.x + \" \" + coords.y + \" \";\n      }\n    }\n  }\n  return pathD;\n}\n\nexport function makeAsphalt({ points, coordInfo, handleDrop }) {\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  const elements = [];\n\n  for (const [indexRoad, road] of points.entries()) {\n    let strings = [];\n\n    for (const side of [\"forward\", \"backward\"]) {\n      for (const lane of road[side]) {\n        strings.push(\n          pointsToString([\n            { letter: \"M\", coords: [vectors.offsetBottom(lane, coordInfo)] },\n            {\n              letter: \"L\",\n              coords: [\n                vectors.laneBottomLeft(lane, road, coordInfo),\n                vectors.laneTopLeft(lane, road, coordInfo),\n                vectors.laneTopRight(lane, road, coordInfo),\n                vectors.laneBottomRight(lane, road, coordInfo),\n              ],\n            },\n            { letter: \"Z\" },\n          ])\n        );\n      }\n    }\n\n    elements.push(\n      <g key={indexRoad}>\n        {strings.map((string, index) => (\n          <Asphalt\n            string={string}\n            side=\"backward\"\n            index={index}\n            indexRoad={indexRoad}\n            accept=\"sign\"\n            onDrop={(item, monitor) => handleDrop(item, monitor, index, indexRoad)}\n            key={index}\n          />\n        ))}\n      </g>\n    );\n  }\n  return elements;\n}\n\nexport function Asphalt({ string, side, index, indexRoad, accept, onDrop }) {\n  const [, dropBind] = useDrop({\n    accept,\n    drop: (item, monitor) => onDrop(item, monitor, index, indexRoad),\n  });\n\n  return (\n    <path ref={dropBind} d={string} key={index} className={side + \"-asphalt\"} />\n  );\n}\n\nexport function Debug({ points, coordInfo, disabled = false }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const debug = {\n    strings: { forward: [], backward: [] },\n    elements: {},\n  };\n\n  for (const side of [\"forward\", \"backward\"]) {\n    for (const road of points) {\n      for (const lane of road[side]) {\n        debug.strings[side].push([\n          vectors.offsetBottom(lane, coordInfo),\n          vectors.offsetTop(lane, coordInfo),\n        ]);\n      }\n    }\n\n    debug.elements[side] = debug.strings[side].map((coords, index) => (\n      <line\n        x1={coords[0].x}\n        y1={coords[0].y}\n        x2={coords[1].x}\n        y2={coords[1].y}\n        key={index}\n        className={side + \"-debug\"}\n      />\n    ));\n  }\n\n  return (\n    <g>\n      {debug.elements.forward}\n      {debug.elements.backward}\n    </g>\n  );\n}\n\nexport function Line({ points, coordInfo }) {\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  const line = {\n    elements: {},\n    strings: { continous: [], striped: [] },\n  };\n\n  for (const side of [\"forward\", \"backward\"]) {\n    for (const road of points) {\n      for (const [indexLane, lane] of road[side].entries()) {\n        if (indexLane !== road[side].length - 1 || side === \"backward\") {\n          if (indexLane === road[side].length - 1 && side === \"backward\") {\n            line.strings.continous.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          } else {\n            line.strings.striped.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          }\n        }\n      }\n    }\n  }\n\n  line.elements.continous = line.strings.continous.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n    />\n  ));\n\n  line.elements.striped = line.strings.striped.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n      strokeDasharray=\"30, 60\"\n    />\n  ));\n\n  return (\n    <g>\n      {line.elements.continous}\n      {line.elements.striped}\n    </g>\n  );\n}\n\nexport function RotateControl({ points, coordInfo, rotateBind }) {\n  if (!(points && coordInfo && rotateBind)) {\n    return null;\n  }\n\n  const rotate = {\n    strings: [],\n  };\n\n  for (const road of points) {\n    rotate.strings.push({\n      vectors: vectors.roadTopMiddle(road, coordInfo),\n      order: road.order,\n    });\n  }\n\n  rotate.elements = rotate.strings.map((coords, index) => (\n    <circle\n      cx={coords.vectors.x}\n      cy={coords.vectors.y}\n      r=\"10\"\n      className=\"rotate\"\n      key={index}\n      {...rotateBind(coords.order)}\n    />\n  ));\n\n  return <g>{rotate.elements}</g>;\n}\n\nexport function LaneControl({ points, coordInfo, addLanes }) {\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  const lane = {\n    strings: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n    elements: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n  };\n\n  for (const road of points) {\n    lane.strings.forward.remove.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.forward.add.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.remove.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.add.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n  }\n\n  lane.elements.forward.remove = lane.strings.forward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Forward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.forward.add = lane.strings.forward.add.map((coords, index) => (\n    <circle\n      cx={coords.x}\n      cy={coords.y}\n      r=\"10\"\n      className=\"add-lane\"\n      key={index}\n      onClick={() => addLanes(index, \"Forward\", 1)}\n    />\n  ));\n\n  lane.elements.backward.remove = lane.strings.backward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.backward.add = lane.strings.backward.add.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", 1)}\n      />\n    )\n  );\n\n  return (\n    <g>\n      {lane.elements.forward.remove}\n      {lane.elements.forward.add}\n      {lane.elements.backward.remove}\n      {lane.elements.backward.add}\n    </g>\n  );\n}\n\nexport function Center({ points, coordInfo }) {\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  const center = {};\n\n  center.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const road of points) {\n    center.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadBottomRight(road, coordInfo),\n        ],\n      },\n    ]);\n  }\n\n  center.element = <path d={center.string} className=\"center\" />;\n\n  return center.element;\n}\n\nexport function Curb({ points, coordInfo }) {\n  if (!(points && coordInfo)) {\n    return null;\n  }\n\n  const curb = {};\n\n  curb.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const [indexRoad, road] of points.entries()) {\n    curb.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadTopLeft(road, coordInfo),\n        ],\n      },\n      {\n        letter: \"M\",\n        coords: [vectors.roadTopRight(road, coordInfo)],\n      },\n      {\n        letter: \"L\",\n        coords: [vectors.roadBottomRight(road, coordInfo)],\n      },\n    ]);\n    if (indexRoad === points.length - 1) {\n      curb.string += pointsToString([\n        {\n          letter: \"L\",\n          coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n        },\n      ]);\n    }\n  }\n\n  curb.element = <path d={curb.string} className=\"curb\" />;\n\n  return curb.element;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDrag } from \"react-use-gesture\";\nimport {\n  makeAsphalt,\n  Debug,\n  Line,\n  RotateControl,\n  LaneControl,\n  Center,\n  Curb,\n} from \"./buildRoad\";\n\nexport default function Artboard() {\n  /* svg ref */\n  const artboardRef = useRef();\n\n  const [coordInfo, setCoordInfo] = useState({});\n\n  const [roadInfo, setRoadInfo] = useState([\n    {\n      numberOfBackward: 1,\n      numberOfForward: 2,\n      angle: 0,\n      order: 0,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 110,\n      order: 1,\n    },\n    {\n      numberOfBackward: 2,\n      numberOfForward: 3,\n      angle: 170,\n      order: 2,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 300,\n      order: 3,\n    },\n  ]);\n\n  const rotateBind = useDrag(({ event, args: [order] }) => {\n    if (event.x && event.y) {\n      const newPoint = sumVector(event, multVector(coordInfo, -1));\n      const newAngle = Math.atan2(newPoint.y, newPoint.x);\n\n      let deg = newAngle * (180 / Math.PI);\n      deg %= 360;\n      if (deg < 0) {\n        deg += 360;\n      }\n\n      // shallow copy\n      const newRoadInfo = roadInfo.map((a) => ({ ...a }));\n      newRoadInfo.sort((a, b) => a.angle - b.angle);\n\n      for (let i = 0; i < newRoadInfo.length; i++) {\n        if (order === newRoadInfo[i].order) {\n          newRoadInfo[i].angle = deg;\n        }\n      }\n\n      setRoadInfo(newRoadInfo);\n    }\n  });\n\n  function addLanes(index, side, add) {\n    const newRoadInfo = roadInfo.map((a) => ({ ...a }));\n\n    const numberOfLanes = newRoadInfo[index][\"numberOf\" + side];\n\n    if (numberOfLanes > 1 || add > 0) {\n      newRoadInfo[index][\"numberOf\" + side] += add;\n    }\n\n    setRoadInfo(newRoadInfo);\n  }\n\n  useEffect(() => {\n    function changeCoordInfo() {\n      /* get coordinates of the svg element */\n      const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n      /* sets state */\n      setCoordInfo(newCoord);\n    }\n\n    changeCoordInfo();\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  }, [artboardRef, roadInfo]);\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  /* const [objectInfo, setObjectInfo] = useState([\n    { signs: [], backward: [], forward: [] },\n    { signs: [], backward: [], forward: [] },\n    { signs: [], backward: [], forward: [] },\n    { signs: [], backward: [], forward: [] },\n  ]); */\n\n  function handleDrop(item, monitor, index, indexRoad) {\n    console.log(item, monitor);\n    console.log({index, indexRoad})\n  }\n\n  const asphaltElements = makeAsphalt({ points, coordInfo, handleDrop });\n\n  return (\n    // touch-action ensures that chrome doesnt stop the drag after a few frames,\n    // but it doesn't work on svg elements\n    // https://stackoverflow.com/questions/45678190/dynamically-disabling-touch-action-overscroll-for-svg-elements\n\n    <div style={{ touchAction: \"none\" }}>\n      <svg className=\"artboard\" ref={artboardRef}>\n        <g>{asphaltElements}</g>\n        <Center points={points} coordInfo={coordInfo} />\n        <Curb points={points} coordInfo={coordInfo} />\n        <Line points={points} coordInfo={coordInfo} />\n        <Debug points={points} coordInfo={coordInfo} disabled />\n        <RotateControl\n          points={points}\n          coordInfo={coordInfo}\n          rotateBind={rotateBind}\n        />\n        <LaneControl\n          points={points}\n          coordInfo={coordInfo}\n          addLanes={addLanes}\n        />\n      </svg>\n    </div>\n  );\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  const points = [];\n\n  if (!(coordInfo && coordInfo.roadLength && coordInfo.roadWidth)) {\n    return null;\n  }\n\n  for (let i = 0; i < roadInfo.length; i++) {\n    const road = roadInfo[i];\n\n    /* maxDistance = pixels from the center to the edge */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n    points[i] = {\n      forward: [],\n      backward: [],\n      maxDistance,\n      angle: road.angle,\n      order: road.order,\n      numberOfForward: road.numberOfForward,\n      numberOfBackward: road.numberOfBackward,\n    };\n\n    const allLanes = road.numberOfForward + road.numberOfBackward;\n\n    for (let j = 0; j < allLanes; j++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - j * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center area */\n        lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth * 0.7, road.angle)\n      );\n\n      let lastPoint = sumVector(\n        firstPoint,\n        lenDeg(coordInfo.roadLength, road.angle)\n      );\n\n      if (j >= road.numberOfForward) {\n        points[i].forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        points[i].backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return points;\n}\n\nexport function lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x, y };\n}\n\nexport function sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x, y };\n}\n\nexport function multVector(a, k) {\n  const x = a.x * k;\n  const y = a.y * k;\n  return { x, y };\n}\n\nexport function getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y);\n  const roadLength = windowBox / 2;\n  const roadWidth = (windowBox / maxRoadWidth) * 0.5;\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n","export default __webpack_public_path__ + \"static/media/forward.fc55a6c4.svg\";","export default __webpack_public_path__ + \"static/media/give way.db0b54fd.svg\";","export default __webpack_public_path__ + \"static/media/left.1aa9e07d.svg\";","export default __webpack_public_path__ + \"static/media/right.ff8f1205.svg\";","export default __webpack_public_path__ + \"static/media/stop.4938481c.svg\";","export default __webpack_public_path__ + \"static/media/priority.1971fe2a.svg\";","import React from \"react\";\n// import { IconButton } from \"@material-ui/core\";\nimport { useDrag } from \"react-dnd\";\n\nimport forward from \"./img/forward.svg\";\nimport give_way from \"./img/give way.svg\";\nimport left from \"./img/left.svg\";\nimport right from \"./img/right.svg\";\nimport stop from \"./img/stop.svg\";\nimport priority from \"./img/priority.svg\";\n\nexport function Inventory() {\n  const images = [forward, give_way, left, right, stop, priority];\n  const Items = images.map((image, index) => (\n    <Item src={image} key={index} index={index} />\n  ));\n  return <div className=\"inventory\">{Items}</div>;\n}\n\nfunction Item({src, index}) {\n  const [collectedProps, drag] = useDrag({\n    item: { id: index, type: \"sign\" },\n    /* end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      console.log(item, dropResult, \"from item\")\n    } */\n  });\n\n  return (\n    <div className=\"drag\" ref={drag}>\n      <img src={src} className=\"sign\" alt={src} draggable={false} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Artboard from \"./Artboard.js\";\nimport { Inventory } from \"./Inventory\";\n\nexport default function App() {\n  return (\n    <>\n      <Inventory />\n      <Artboard />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}