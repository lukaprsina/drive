{"version":3,"sources":["buildRoad.js","Cars.js","Artboard.js","img/forward.svg","img/give way.svg","img/left.svg","img/right.svg","img/stop.svg","img/priority.svg","Inventory.js","App.js","index.js"],"names":["SvgGroup","accept","onDrop","indexRoad","children","side","useDrop","drop","item","dropBind","ref","Asphalt","string","indexLane","d","className","Debug","points","coordInfo","disabled","vectors","debug","strings","forward","backward","elements","road","lane","push","offsetBottom","offsetTop","map","coords","index","x1","x","y1","y","x2","y2","Line","line","continous","striped","entries","length","laneBottomRight","laneTopRight","strokeDasharray","LaneConnect","curves","indexFirst","roadFirst","laneForward","indexSecond","roadSecond","laneBackward","pointsToString","letter","sumVector","first","RotateControl","rotateBind","rotate","roadTopMiddle","order","cx","cy","r","LaneControl","addLanes","remove","add","roadBottomLeft","lenDeg","roadLength","angle","roadBottomRight","onClick","Center","center","element","Curb","curb","roadTopLeft","roadTopRight","Cars","objectInfo","cars","carPosition","indexCar","roadWidth","_","require","Artboard","artboardRef","useRef","useState","setCoordInfo","numberOfBackward","numberOfForward","roadInfo","setRoadInfo","last","halfRoadLeft","halfRoadRight","laneBottomLeft","laneTopLeft","useDrag","event","args","newPoint","a","k","multVector","deg","Math","atan2","PI","newRoadInfo","cloneDeep","sort","b","i","useEffect","changeCoordInfo","newCoord","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","windowBox","min","getCoordinateInfo","window","addEventListener","removeEventListener","maxDistance","allLanes","test","j","firstPoint","lastPoint","calculatePoints","signs","setObjectInfo","asphaltElements","handleSignDrop","handleCarDrop","makeAsphalt","newObjectInfo","id","asphaltBackward","asphaltForward","style","touchAction","cos","sin","pointsArray","pathD","Inventory","Signs","give_way","stop","priority","image","Sign","src","Car","type","drag","draggable","IconButton","alt","App","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.78ab8187.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { sumVector, lenDeg, pointsToString } from \"./Artboard\";\n\nexport function makeAsphalt({\n  points,\n  coordInfo,\n  handleSignDrop,\n  handleCarDrop,\n  vectors,\n  disabled = false,\n}) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const elements = { forward: [], backward: [] };\n\n  for (const [indexRoad, road] of points.entries()) {\n    let strings = { forward: [], backward: [] };\n\n    for (const side of [\"backward\", \"forward\"]) {\n      for (const lane of road[side]) {\n        strings[side].push(\n          pointsToString([\n            { letter: \"M\", coords: [vectors.offsetBottom(lane, coordInfo)] },\n            {\n              letter: \"L\",\n              coords: [\n                vectors.laneBottomLeft(lane, road, coordInfo),\n                vectors.laneTopLeft(lane, road, coordInfo),\n                vectors.laneTopRight(lane, road, coordInfo),\n                vectors.laneBottomRight(lane, road, coordInfo),\n              ],\n            },\n            { letter: \"Z\" },\n          ])\n        );\n      }\n    }\n\n    for (const side of [\"backward\", \"forward\"]) {\n      elements[side].push(\n        <SvgGroup\n          key={indexRoad}\n          indexRoad={indexRoad}\n          accept={[\"sign\"]}\n          side={side}\n          onDrop={(item) => handleSignDrop(item, indexRoad)}\n        >\n          {strings[side].map((string, index) => (\n            <Asphalt\n              string={string}\n              indexLane={index}\n              indexRoad={indexRoad}\n              accept={[\"car\"]}\n              side={side}\n              onDrop={(item) => handleCarDrop(item, indexRoad, index)}\n              key={index}\n            />\n          ))}\n        </SvgGroup>\n      );\n    }\n  }\n  return elements;\n}\n\nfunction SvgGroup({ accept, onDrop, indexRoad, children, side }) {\n  const [, dropBind] = useDrop({\n    accept,\n    drop: side === \"forward\" ? (item) => onDrop(item, indexRoad) : null,\n  });\n\n  return <g ref={dropBind}>{children}</g>;\n}\n\nfunction Asphalt({ string, indexLane, indexRoad, accept, onDrop, side }) {\n  const [, dropBind] = useDrop({\n    accept,\n    drop:\n      side === \"forward\" ? (item) => onDrop(item, indexRoad, indexLane) : null,\n  });\n\n  return <path ref={dropBind} d={string} key={indexLane} className=\"asphalt\" />;\n}\n\nexport function Debug({ points, coordInfo, disabled = false, vectors }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const debug = {\n    strings: { forward: [], backward: [] },\n    elements: {},\n  };\n\n  for (const side of [\"backward\", \"forward\"]) {\n    for (const road of points) {\n      for (const lane of road[side]) {\n        debug.strings[side].push([\n          vectors.offsetBottom(lane, coordInfo),\n          vectors.offsetTop(lane, coordInfo),\n        ]);\n      }\n    }\n\n    debug.elements[side] = debug.strings[side].map((coords, index) => (\n      <line\n        x1={coords[0].x}\n        y1={coords[0].y}\n        x2={coords[1].x}\n        y2={coords[1].y}\n        key={index}\n        className={side + \"-debug\"}\n      />\n    ));\n  }\n\n  return (\n    <g>\n      {debug.elements.forward}\n      {debug.elements.backward}\n    </g>\n  );\n}\n\nexport function Line({ points, coordInfo, disabled = false, vectors }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const line = {\n    elements: {},\n    strings: { continous: [], striped: [] },\n  };\n\n  for (const side of [\"backward\", \"forward\"]) {\n    for (const road of points) {\n      for (const [indexLane, lane] of road[side].entries()) {\n        if (indexLane !== road[side].length - 1 || side === \"forward\") {\n          if (indexLane === road[side].length - 1 && side === \"forward\") {\n            line.strings.continous.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          } else {\n            line.strings.striped.push([\n              vectors.laneBottomRight(lane, road, coordInfo),\n              vectors.laneTopRight(lane, road, coordInfo),\n            ]);\n          }\n        }\n      }\n    }\n  }\n\n  line.elements.continous = line.strings.continous.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n    />\n  ));\n\n  line.elements.striped = line.strings.striped.map((coords, index) => (\n    <line\n      x1={coords[0].x}\n      y1={coords[0].y}\n      x2={coords[1].x}\n      y2={coords[1].y}\n      key={index}\n      className=\"line\"\n      strokeDasharray=\"30, 60\"\n    />\n  ));\n\n  return (\n    <g>\n      {line.elements.continous}\n      {line.elements.striped}\n    </g>\n  );\n}\n\nexport function LaneConnect({ points, coordInfo, disabled = false, vectors }) {\n  const curves = {\n    strings: [],\n  };\n\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  for (const [indexFirst, roadFirst] of points.entries()) {\n    for (const laneForward of roadFirst.forward) {\n      for (const [indexSecond, roadSecond] of points.entries()) {\n        if (indexFirst !== indexSecond) {\n          for (const laneBackward of roadSecond.backward) {\n            curves.strings.push(\n              pointsToString([\n                {\n                  letter: \"M\",\n                  coords: [vectors.offsetBottom(laneForward, coordInfo)],\n                },\n                {\n                  letter: \"Q\",\n                  coords: [coordInfo, sumVector(laneBackward.first, coordInfo)],\n                },\n              ])\n            );\n          }\n        }\n      }\n    }\n  }\n\n  curves.elements = curves.strings.map((coords, index) => (\n    <path d={coords} key={index} className=\"curve\" />\n  ));\n  return <g>{curves.elements}</g>;\n}\n\nexport function RotateControl({\n  points,\n  coordInfo,\n  rotateBind,\n  disabled = false, vectors\n}) {\n  if (!(points && coordInfo && rotateBind && !disabled)) {\n    return null;\n  }\n\n  const rotate = {\n    strings: [],\n  };\n\n  for (const road of points) {\n    rotate.strings.push({\n      vectors: vectors.roadTopMiddle(road, coordInfo),\n      order: road.order,\n    });\n  }\n\n  rotate.elements = rotate.strings.map((coords, index) => (\n    <circle\n      cx={coords.vectors.x}\n      cy={coords.vectors.y}\n      r=\"10\"\n      className=\"rotate\"\n      key={index}\n      {...rotateBind(coords.order)}\n    />\n  ));\n\n  return <g>{rotate.elements}</g>;\n}\n\nexport function LaneControl({ points, coordInfo, addLanes, disabled = false, vectors }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const lane = {\n    strings: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n    elements: {\n      forward: { remove: [], add: [] },\n      backward: { remove: [], add: [] },\n    },\n  };\n\n  for (const road of points) {\n    lane.strings.forward.remove.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.forward.add.push(\n      sumVector(\n        vectors.roadBottomLeft(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.remove.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg(coordInfo.roadLength / 3, road.angle)\n      )\n    );\n\n    lane.strings.backward.add.push(\n      sumVector(\n        vectors.roadBottomRight(road, coordInfo),\n        lenDeg((coordInfo.roadLength * 2) / 3, road.angle)\n      )\n    );\n  }\n\n  lane.elements.forward.remove = lane.strings.forward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Forward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.forward.add = lane.strings.forward.add.map((coords, index) => (\n    <circle\n      cx={coords.x}\n      cy={coords.y}\n      r=\"10\"\n      className=\"add-lane\"\n      key={index}\n      onClick={() => addLanes(index, \"Forward\", 1)}\n    />\n  ));\n\n  lane.elements.backward.remove = lane.strings.backward.remove.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", -1)}\n      />\n    )\n  );\n\n  lane.elements.backward.add = lane.strings.backward.add.map(\n    (coords, index) => (\n      <circle\n        cx={coords.x}\n        cy={coords.y}\n        r=\"10\"\n        className=\"add-lane\"\n        key={index}\n        onClick={() => addLanes(index, \"Backward\", 1)}\n      />\n    )\n  );\n\n  return (\n    <g>\n      {lane.elements.forward.remove}\n      {lane.elements.forward.add}\n      {lane.elements.backward.remove}\n      {lane.elements.backward.add}\n    </g>\n  );\n}\n\nexport function Center({ points, coordInfo, disabled = false, vectors }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const center = {};\n\n  center.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const road of points) {\n    center.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadBottomRight(road, coordInfo),\n        ],\n      },\n    ]);\n  }\n\n  center.element = <path d={center.string} className=\"center\" />;\n\n  return center.element;\n}\n\nexport function Curb({ points, coordInfo, disabled = false, vectors }) {\n  if (!(points && coordInfo && !disabled)) {\n    return null;\n  }\n\n  const curb = {};\n\n  curb.string = pointsToString([\n    {\n      letter: \"M\",\n      coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n    },\n  ]);\n\n  for (const [indexRoad, road] of points.entries()) {\n    curb.string += pointsToString([\n      {\n        letter: \"L\",\n        coords: [\n          vectors.roadBottomLeft(road, coordInfo),\n          vectors.roadTopLeft(road, coordInfo),\n        ],\n      },\n      {\n        letter: \"M\",\n        coords: [vectors.roadTopRight(road, coordInfo)],\n      },\n      {\n        letter: \"L\",\n        coords: [vectors.roadBottomRight(road, coordInfo)],\n      },\n    ]);\n    if (indexRoad === points.length - 1) {\n      curb.string += pointsToString([\n        {\n          letter: \"L\",\n          coords: [vectors.roadBottomLeft(points[0], coordInfo)],\n        },\n      ]);\n    }\n  }\n\n  curb.element = <path d={curb.string} className=\"curb\" />;\n\n  return curb.element;\n}\n","import React from \"react\";\nimport { sumVector, lenDeg } from \"./Artboard\";\n\nexport default function Cars({ objectInfo, points, coordInfo }) {\n  const cars = { strings: [] };\n  let carPosition = {};\n\n  for (const [indexRoad, road] of objectInfo.entries()) {\n    if (road.cars.length !== 0) {\n      for (const [indexLane, lane] of road.cars.entries()) {\n        if (lane) {\n          for (const [indexCar, car] of lane.entries()) {\n            carPosition = sumVector(\n              sumVector(points[indexRoad].forward[indexLane].first, coordInfo),\n              lenDeg(\n                coordInfo.roadWidth * (indexCar + 0.5),\n                points[indexRoad].angle\n              )\n            );\n            cars.strings.push(carPosition);\n          }\n        }\n      }\n    }\n  }\n\n  cars.elements = cars.strings.map((coords, index) => (\n    <circle cx={coords.x} cy={coords.y} r=\"10\" key={index} className=\"car\" />\n  ));\n\n  return cars.elements;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDrag } from \"react-use-gesture\";\nimport {\n  makeAsphalt,\n  Debug,\n  Line,\n  RotateControl,\n  LaneControl,\n  Center,\n  Curb,\n  LaneConnect,\n} from \"./buildRoad\";\nimport Cars from \"./Cars\";\n\nconst _ = require(\"lodash\");\n\nexport default function Artboard() {\n  /* svg ref */\n  const artboardRef = useRef();\n\n  const [coordInfo, setCoordInfo] = useState({});\n\n  const [roadInfo, setRoadInfo] = useState([\n    {\n      numberOfBackward: 1,\n      numberOfForward: 2,\n      angle: 0,\n      order: 0,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 110,\n      order: 1,\n    },\n    {\n      numberOfBackward: 2,\n      numberOfForward: 3,\n      angle: 170,\n      order: 2,\n    },\n    {\n      numberOfBackward: 1,\n      numberOfForward: 1,\n      angle: 300,\n      order: 3,\n    },\n  ]);\n\n  const vectors = {\n    offsetBottom: (lane, coordInfo) => sumVector(coordInfo, lane.first),\n\n    offsetTop: (lane, coordInfo) => sumVector(coordInfo, lane.last),\n\n    halfRoadLeft: (road, coordInfo) =>\n      lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n\n    halfRoadRight: (road, coordInfo) =>\n      lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n\n    laneBottomLeft: (lane, road, coordInfo) =>\n      sumVector(\n        vectors.halfRoadLeft(road, coordInfo),\n        vectors.offsetBottom(lane, coordInfo)\n      ),\n\n    laneTopLeft: (lane, road, coordInfo) =>\n      sumVector(\n        vectors.halfRoadLeft(road, coordInfo),\n        vectors.offsetTop(lane, coordInfo)\n      ),\n\n    laneBottomRight: (lane, road, coordInfo) =>\n      sumVector(\n        vectors.halfRoadRight(road, coordInfo),\n        vectors.offsetBottom(lane, coordInfo)\n      ),\n\n    laneTopRight: (lane, road, coordInfo) =>\n      sumVector(\n        vectors.halfRoadRight(road, coordInfo),\n        vectors.offsetTop(lane, coordInfo)\n      ),\n\n    roadBottomLeft: (road, coordInfo) =>\n      sumVector(\n        sumVector(road.forward[0].first, coordInfo),\n        vectors.halfRoadLeft(road, coordInfo)\n      ),\n\n    roadBottomRight: (road, coordInfo) =>\n      sumVector(\n        sumVector(road.backward[road.backward.length - 1].first, coordInfo),\n        vectors.halfRoadRight(road, coordInfo)\n      ),\n    roadTopLeft: (road, coordInfo) =>\n      sumVector(\n        sumVector(road.forward[0].last, coordInfo),\n        vectors.halfRoadLeft(road, coordInfo)\n      ),\n\n    roadTopRight: (road, coordInfo) =>\n      sumVector(\n        sumVector(road.backward[road.backward.length - 1].last, coordInfo),\n        vectors.halfRoadRight(road, coordInfo)\n      ),\n\n    roadTopMiddle: (road, coordInfo) =>\n      sumVector(\n        lenDeg(coordInfo.roadLength, road.angle),\n        sumVector(\n          lenDeg(\n            ((road.numberOfForward + road.numberOfBackward) *\n              coordInfo.roadWidth) /\n              2,\n            road.angle + 90\n          ),\n          vectors.roadBottomLeft(road, coordInfo)\n        )\n      ),\n  };\n\n  const rotateBind = useDrag(({ event, args: [order] }) => {\n    if (event.x && event.y) {\n      const newPoint = sumVector(event, multVector(coordInfo, -1));\n      const newAngle = Math.atan2(newPoint.y, newPoint.x);\n\n      let deg = newAngle * (180 / Math.PI);\n      deg %= 360;\n      if (deg < 0) {\n        deg += 360;\n      }\n\n      const newRoadInfo = _.cloneDeep(roadInfo);\n      newRoadInfo.sort((a, b) => a.angle - b.angle);\n\n      for (let i = 0; i < newRoadInfo.length; i++) {\n        if (order === newRoadInfo[i].order) {\n          newRoadInfo[i].angle = deg;\n        }\n      }\n\n      setRoadInfo(newRoadInfo);\n    }\n  });\n\n  function addLanes(index, side, add) {\n    const newRoadInfo = _.cloneDeep(roadInfo);\n\n    const numberOfLanes = newRoadInfo[index][\"numberOf\" + side];\n\n    if (numberOfLanes > 1 || add > 0) {\n      newRoadInfo[index][\"numberOf\" + side] += add;\n    }\n\n    setRoadInfo(newRoadInfo);\n  }\n\n  useEffect(() => {\n    function changeCoordInfo() {\n      /* get coordinates of the svg element */\n      const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n      /* sets state */\n      setCoordInfo(newCoord);\n    }\n\n    changeCoordInfo();\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  }, [artboardRef, roadInfo]);\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  const [objectInfo, setObjectInfo] = useState([\n    { cars: [], signs: [] },\n    { cars: [], signs: [] },\n    { cars: [], signs: [] },\n    { cars: [], signs: [] },\n  ]);\n\n  function handleCarDrop(item, indexRoad, indexLane) {\n    const newObjectInfo = _.cloneDeep(objectInfo);\n\n    if (!newObjectInfo[indexRoad].cars[indexLane]) {\n      newObjectInfo[indexRoad].cars[indexLane] = [];\n    }\n\n    newObjectInfo[indexRoad].cars[indexLane].push(item.id);\n    setObjectInfo(newObjectInfo);\n  }\n\n  function handleSignDrop(item, indexRoad) {\n    const newObjectInfo = _.cloneDeep(objectInfo);\n\n    if (!newObjectInfo[indexRoad].signs) {\n      newObjectInfo[indexRoad].signs = [];\n    }\n\n    newObjectInfo[indexRoad].signs.push(item.id);\n    setObjectInfo(newObjectInfo);\n  }\n\n  const asphaltElements = makeAsphalt({\n    points,\n    coordInfo,\n    handleSignDrop,\n    handleCarDrop,\n    vectors,\n  });\n\n  if (asphaltElements) {\n    var asphaltBackward = asphaltElements.backward;\n    var asphaltForward = asphaltElements.forward;\n  }\n\n  return (\n    // touch-action ensures that chrome doesnt stop the drag after a few frames,\n    // but it doesn't work on svg elements, so I wraped it in a div,\n    // https://stackoverflow.com/questions/45678190/dynamically-disabling-touch-action-overscroll-for-svg-elements\n\n    <div style={{ touchAction: \"none\" }}>\n      <svg className=\"artboard\" ref={artboardRef}>\n        <g>\n          {asphaltBackward}\n          {asphaltForward}\n        </g>\n        <Center points={points} coordInfo={coordInfo} vectors={vectors} />\n        <Curb points={points} coordInfo={coordInfo} vectors={vectors} />\n        <Line points={points} coordInfo={coordInfo} vectors={vectors} />\n        <LaneConnect\n          points={points}\n          coordInfo={coordInfo}\n          vectors={vectors}\n          disabled\n        />\n        <Debug\n          points={points}\n          coordInfo={coordInfo}\n          disabled\n          vectors={vectors}\n        />\n        <RotateControl\n          points={points}\n          coordInfo={coordInfo}\n          rotateBind={rotateBind}\n          vectors={vectors}\n        />\n        <LaneControl\n          points={points}\n          coordInfo={coordInfo}\n          addLanes={addLanes}\n          vectors={vectors}\n        />\n        <Cars\n          objectInfo={objectInfo}\n          coordInfo={coordInfo}\n          points={points}\n        />\n      </svg>\n    </div>\n  );\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  const points = [];\n\n  if (!(coordInfo && coordInfo.roadLength && coordInfo.roadWidth)) {\n    return null;\n  }\n\n  for (let i = 0; i < roadInfo.length; i++) {\n    const road = roadInfo[i];\n\n    /* maxDistance = pixels from the center to the edge */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n    points[i] = {\n      forward: [],\n      backward: [],\n      maxDistance,\n      angle: road.angle,\n      order: road.order,\n      numberOfForward: road.numberOfForward,\n      numberOfBackward: road.numberOfBackward,\n    };\n\n    const allLanes = road.numberOfForward + road.numberOfBackward;\n    const test =\n      ((road.numberOfForward + road.numberOfBackward) * coordInfo.roadWidth) /\n      5;\n\n    for (let j = 0; j < allLanes; j++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - j * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center area */\n        sumVector(\n          lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth, road.angle),\n          lenDeg(test, road.angle - 180)\n        )\n      );\n\n      let lastPoint = sumVector(\n        firstPoint,\n        lenDeg(coordInfo.roadLength, road.angle)\n      );\n\n      if (j < road.numberOfForward) {\n        points[i].forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        points[i].backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return points;\n}\n\nexport function lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x, y };\n}\n\nexport function sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x, y };\n}\n\nexport function multVector(a, k) {\n  const x = a.x * k;\n  const y = a.y * k;\n  return { x, y };\n}\n\nexport function getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y);\n  const roadLength = windowBox / 2;\n  const roadWidth = (windowBox / maxRoadWidth) * 0.5;\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n\nexport function pointsToString(pointsArray) {\n  if (!(pointsArray && pointsArray.length)) {\n    return null;\n  }\n\n  let pathD = \"\";\n\n  for (const order of pointsArray) {\n    pathD += order.letter + \" \";\n\n    if (order.coords) {\n      for (const coords of order.coords) {\n        pathD += coords.x + \" \" + coords.y + \" \";\n      }\n    }\n  }\n  return pathD;\n}\n","export default __webpack_public_path__ + \"static/media/forward.fc55a6c4.svg\";","export default __webpack_public_path__ + \"static/media/give way.db0b54fd.svg\";","export default __webpack_public_path__ + \"static/media/left.1aa9e07d.svg\";","export default __webpack_public_path__ + \"static/media/right.ff8f1205.svg\";","export default __webpack_public_path__ + \"static/media/stop.4938481c.svg\";","export default __webpack_public_path__ + \"static/media/priority.1971fe2a.svg\";","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDrag } from \"react-dnd\";\n\nimport forward from \"./img/forward.svg\";\nimport give_way from \"./img/give way.svg\";\nimport left from \"./img/left.svg\";\nimport right from \"./img/right.svg\";\nimport stop from \"./img/stop.svg\";\nimport priority from \"./img/priority.svg\";\n\nexport function Inventory() {\n  const images = [forward, give_way, left, right, stop, priority];\n  const Signs = images.map((image, index) => (\n    <Sign src={image} key={index} index={index} />\n  ));\n\n  return <div className=\"inventory\">{Signs}<Car /></div>;\n}\n\nfunction Car() {\n  const [, drag] = useDrag({\n    item: { id: \"car\", type: \"car\" },\n  });\n\n  return (\n    <div className=\"drag\" ref={drag}>\n      <div className=\"item car-item\" draggable={false} ></div>\n    </div>\n  );\n}\n\nfunction Sign({src, index}) {\n  const [, drag] = useDrag({\n    item: { id: index, type: \"sign\" },\n    /* end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      console.log(item, dropResult, \"from item\")\n    } */\n  });\n\n  return (\n    <IconButton className=\"drag\" ref={drag}>\n      <img src={src} className=\"item sign\" alt={src} draggable={false} />\n    </IconButton>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Artboard from \"./Artboard.js\";\nimport { Inventory } from \"./Inventory\";\n\nexport default function App() {\n  return (\n    <>\n      <Inventory />\n      <Artboard />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}