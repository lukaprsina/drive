{"version":3,"sources":["Artboard.js","App.js","index.js"],"names":["lenDeg","d","angle","deg","Math","PI","x","cos","y","sin","round","sumVector","a","b","Artboard","roads","debug","elements","forward","backward","strings","asphalt","roadInfo","numberOfForward","numberOfBackward","artboardRef","useRef","useState","coordInfo","setCoordInfo","changeCoordInfo","newCoord","element","current","clientRect","getBoundingClientRect","right","left","bottom","top","maxRoadWidth","max","apply","map","road","windowBox","min","roadLength","roadWidth","getCoordinateInfo","useEffect","window","addEventListener","removeEventListener","points","centerPoints","entries","index","buildLanes","first","lastPoint","length","center","className","buildRoad","maxDistance","i","firstPoint","push","last","calculatePoints","id","ref","side","layer","lane","lanes","offset","across","back","coords","x1","y1","x2","y2","console","error","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da04057e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction lenDeg(d, angle) {\n  const deg = (angle * Math.PI) / 180;\n  const x = d * Math.cos(deg);\n  const y = d * Math.sin(deg);\n  return { x: Math.round(x * 100) / 100, y: Math.round(y * 100) / 100 };\n}\n\nfunction sumVector(a, b) {\n  const x = a.x + b.x;\n  const y = a.y + b.y;\n  return { x: Math.round(x * 100) / 100, y: Math.round(y * 100) / 100 };\n}\n\nexport default function Artboard() {\n  let roads = {\n    debug: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n    asphalt: {\n      elements: { forward: [], backward: [] },\n      strings: { forward: [], backward: [] },\n    },\n  };\n\n  const roadInfo = [\n    {\n      numberOfForward: 3,\n      numberOfBackward: 2,\n      angle: 0,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 4,\n      angle: 110,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 8,\n      numberOfBackward: 2,\n      angle: 180,\n      forward: [],\n      backward: [],\n    },\n    {\n      numberOfForward: 1,\n      numberOfBackward: 1,\n      angle: 270,\n      forward: [],\n      backward: [],\n    },\n  ];\n\n  /* svg ref */\n  const artboardRef = useRef();\n\n  /* rerender on every window change */\n  const [coordInfo, setCoordInfo] = useState({});\n\n  function changeCoordInfo() {\n    /* get coordinates of the svg element */\n    const newCoord = getCoordinateInfo(artboardRef, roadInfo);\n    /* sets state */\n    setCoordInfo(newCoord);\n  }\n  /* call getCoordinateInfo on the first render */\n  useEffect(() => {\n    changeCoordInfo();\n  }, []);\n\n  useEffect(() => {\n    /* call getCoordinateInfo on every window change */\n    window.addEventListener(\"resize\", changeCoordInfo);\n\n    return () => {\n      window.removeEventListener(\"resize\", changeCoordInfo);\n    };\n  });\n\n  /* get a list of all the road points */\n  const points = calculatePoints(roadInfo, coordInfo);\n\n  /* create elements based on road points */\n  buildRoad(points, roads, coordInfo);\n\n  return (\n    <svg id=\"artboard\" ref={artboardRef}>\n      {roads.asphalt.elements.forward}\n      {roads.asphalt.elements.backward}\n      {roads.debug.elements.forward}\n      {roads.debug.elements.backward}\n      {roads.center}\n    </svg>\n  );\n}\n\nfunction getCoordinateInfo(element, roadInfo) {\n  if (!element.current) {\n    return null;\n  }\n\n  const clientRect = element.current.getBoundingClientRect();\n  const x = (clientRect.right - clientRect.left) / 2;\n  const y = (clientRect.bottom - clientRect.top) / 2;\n\n  const maxRoadWidth = Math.max.apply(\n    Math,\n    roadInfo.map((road) => {\n      return road.numberOfForward + road.numberOfBackward;\n    })\n  );\n  const windowBox = Math.min(x, y);\n  const roadLength = windowBox / 2;\n  const roadWidth = windowBox / (maxRoadWidth * 3);\n\n  return { x, y, roadLength, roadWidth, maxRoadWidth };\n}\n\nfunction calculatePoints(roadInfo, coordInfo) {\n  /* coordinfo { x, y, roadLength, roadWidth, maxRoadWidth }; */\n  if (!coordInfo.roadLength && !coordInfo.roadWidth) {\n    return null;\n  }\n\n  for (const road of roadInfo) {\n    /* maxDistance = pixli od sredine do skrajnega cestišča */\n    const maxDistance =\n      ((road.numberOfForward + road.numberOfBackward - 1) *\n        coordInfo.roadWidth) /\n      2;\n\n    for (let i = 0; i < road.numberOfForward + road.numberOfBackward; i++) {\n      let firstPoint = sumVector(\n        /* sum vector pointing east to get left or right */\n        lenDeg(maxDistance - i * coordInfo.roadWidth, road.angle - 90),\n        /* and the vector, responsible for making the center */\n        lenDeg(coordInfo.maxRoadWidth * coordInfo.roadWidth, road.angle)\n      );\n\n      let lastPoint = sumVector(\n        firstPoint,\n        lenDeg(coordInfo.roadLength, road.angle)\n      );\n\n      if (i >= road.numberOfBackward) {\n        road.forward.push({ first: firstPoint, last: lastPoint });\n      } else {\n        road.backward.push({ first: firstPoint, last: lastPoint });\n      }\n    }\n  }\n  return roadInfo;\n}\n\nfunction buildLanes(road, roads, side, layer, coordInfo) {\n  switch (layer) {\n    case \"asphalt\":\n      for (const lane of road[side]) {\n        let lanes = \"\";\n\n        const offset = sumVector(coordInfo, lane.first);\n\n        const firstPoint = sumVector(\n          lenDeg(coordInfo.roadWidth / 2, road.angle - 90),\n          offset\n        );\n\n        const lastPoint = sumVector(\n          sumVector(coordInfo, lane.last),\n          lenDeg(coordInfo.roadWidth / 2, road.angle - 90)\n        );\n\n        const across = sumVector(\n          lenDeg(coordInfo.roadWidth, road.angle + 90),\n          lastPoint\n        );\n\n        const back = sumVector(\n          lenDeg(coordInfo.roadWidth / 2, road.angle + 90),\n          offset\n        );\n\n        lanes += \"M \" + offset.x + \" \" + offset.y + \" \";\n        lanes += \"L \" + firstPoint.x + \" \" + firstPoint.y + \" \";\n        lanes += \"L \" + lastPoint.x + \" \" + lastPoint.y + \" \";\n        lanes += \"L \" + across.x + \" \" + across.y + \" \";\n        lanes += \"L \" + back.x + \" \" + back.y + \" \";\n        lanes += \"Z\";\n\n        roads[layer].strings[side].push(lanes);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((lane, index) => (\n        <path d={lane} key={index} className={side + \"-\" + layer} />\n      ));\n      break;\n\n    case \"debug\":\n      for (const lane of road[side]) {\n        let coords = {\n          x1: coordInfo.x + lane.first.x,\n          y1: coordInfo.y + lane.first.y,\n          x2: coordInfo.x + lane.last.x,\n          y2: coordInfo.y + lane.last.y,\n        };\n        roads[layer].strings[side].push(coords);\n      }\n\n      roads[layer].elements[side] = roads[layer].strings[\n        side\n      ].map((coords, index) => (\n        <line\n          x1={coords.x1}\n          y1={coords.y1}\n          x2={coords.x2}\n          y2={coords.y2}\n          key={index}\n          className={side + \"-\" + layer}\n        />\n      ));\n      break;\n\n    default:\n      console.error(\"Wrong road layer\");\n  }\n}\n\nfunction buildRoad(points, roads, coordInfo) {\n  if (!points) {\n    return null;\n  }\n\n  let centerPoints = \"\";\n\n  for (const [index, road] of points.entries()) {\n    buildLanes(road, roads, \"forward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"debug\", coordInfo);\n    buildLanes(road, roads, \"forward\", \"asphalt\", coordInfo);\n    buildLanes(road, roads, \"backward\", \"asphalt\", coordInfo);\n\n    if (index === 0) {\n      //coordInfo.roadWidth\n      centerPoints +=\n      \"M \" +\n      (road.backward[0].first.x + coordInfo.x) +\n      \" \" +\n      (road.backward[0].first.y + coordInfo.y) +\n      \" \";\n    }\n\n    centerPoints +=\n      \"L \" +\n      (road.backward[0].first.x + coordInfo.x) +\n      \" \" +\n      (road.backward[0].first.y + coordInfo.y) +\n      \" \";\n\n    const lastPoint = road.forward.length - 1;\n\n    centerPoints +=\n      \"L \" +\n      (road.forward[lastPoint].first.x + coordInfo.x) +\n      \" \" +\n      (road.forward[lastPoint].first.y + coordInfo.y) +\n      \" \";\n  }\n  centerPoints += \"Z\";\n\n  roads.center = <path d={centerPoints} className=\"forward-asphalt\" />;\n}\n","import React from \"react\";\nimport \"./App.css\";\n/* import { Typography } from \"@material-ui/core\";\nimport { useSpring, animated, config } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\"; */\nimport Artboard from \"./Artboard.js\";\n\n\nexport default function App() {\n  return (\n    <>\n      <Artboard />\n      {/* <Solution />\n      <Inventory /> */}\n    </>\n  );\n}\n/* function Solution() {\n  return (\n    <Typography variant=\"body1\">\n      Solution\n      <br />\n    </Typography>\n  );\n}\n\nfunction Inventory() {\n  return (\n    <>\n      <Item />\n      <Item />\n    </>\n  );\n}\n\nfunction Item() {\n  const [{ x, y }, setSpring] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: config.stiff,\n  }));\n\n  const [isClicking, setIsClicking] = useState(false);\n\n  const bind = useGesture({\n    onDrag: ({ down, movement: [mx, my] }) => {\n      setSpring({ x: down ? mx : 0, y: down ? my : 0 });\n      setIsClicking(!mx && !my);\n    },\n    onDragEnd: ({ event }) => {\n      if (isClicking) {\n        console.log(\"Click\");\n      } else {\n        console.log(\"Move\", event.x, event.y);\n      }\n    },\n  });\n\n  return <animated.div className=\"drag\" {...bind()} style={{ x, y }} />;\n}\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}